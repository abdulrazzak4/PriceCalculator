@page "/calculate-price"
@using PriceCalculator.App.Model
@using PriceCalculator.App.Services
@using PriceCalculator.App.Services
@inject ResourceService ResourceService
@inject MSPTierService MSPTierService
@inject PriceService PriceService

<h3>Calculate Total Price</h3>

<div class="form-group">
    <label for="tierSelect">Select MSP Tier:</label>
    <select id="tierSelect" class="form-control" @bind="selectedTierId" @bind:event="onchange">
        <option value="">-- Select MSP Tier --</option>
        @foreach (var tier in mspTiers.Where(t => t.IsActive))
        {
            <option value="@tier.Id">@tier.Name</option>
        }
    </select>
</div>

<h4>Select Resources</h4>
<div class="resources-list">
    @foreach (var resource in resources)
    {
        <div class="resource-item">
            <input type="checkbox" @bind="resourceSelections[resource.Id]" id="resource_@resource.Id" />
            <label for="resource_@resource.Id">@resource.Name</label>

            @if (resourceSelections[resource.Id])
            {
                <div class="quantity-input">
                    <label>Quantity:</label>
                    <input type="number" @bind="quantities[resource.Id]" @bind:event="oninput" min="1" class="form-control quantity-box" />
                </div>

            }
        </div>
    }
</div>

@if (totalPrice.HasValue)
{
    <h4>Total Price: @totalPrice.Value</h4>
}

<button class="btn btn-primary" @onclick="CalculateTotalPrice">Calculate Price</button>

<style>
    .form-group, .resources-list, .resource-item {
        margin-bottom: 1em;
    }

    .quantity-input {
        display: flex;
        align-items: center;
        gap: 0.5em;
    }

    .quantity-box {
        width: 80px;
    }
</style>



@code {
    private List<ResourceDTO> resources = new List<ResourceDTO>();
    private List<MSPTierDTO> mspTiers = new List<MSPTierDTO>();
    private int? selectedTierId;
    private Dictionary<int, bool> resourceSelections = new Dictionary<int, bool>();
    private Dictionary<int, int> quantities = new Dictionary<int, int>();
    private decimal? totalPrice;

    protected override async Task OnInitializedAsync()
    {
        await LoadResources();
        await LoadTiers();
    }

    private async Task LoadResources()
    {
        resources = await ResourceService.GetResourcesAsync();
        // Initialize selection and quantities dictionaries
        resourceSelections = resources.ToDictionary(r => r.Id, r => false);
        quantities = resources.ToDictionary(r => r.Id, r => 1); // Default quantity of 1
    }

    private async Task LoadTiers()
    {
        mspTiers = await MSPTierService.GetMSPTiersAsync();
    }

    private void UpdateResourcePrices()
    {
        // Triggered when MSP tier or quantity changes
        StateHasChanged();
    }

    private async Task CalculateTotalPrice()
    {
        if (selectedTierId.HasValue)
        {
            var selectedResourcesWithQuantities = resourceSelections
                .Where(r => r.Value) // Filter selected resources
                .Select(r => new ResourceSelectionDTO { ResourceId = r.Key, Quantity = quantities[r.Key] })
                .ToList();

            if (selectedResourcesWithQuantities.Count > 0)
            {
                try
                {
                    var requestPayload = new PriceCalculationRequestDTO
                        {
                            ResourceSelections = selectedResourcesWithQuantities,
                            MSPTierId = selectedTierId.Value
                        };

                    totalPrice = await PriceService.GetTotalPriceAsync(requestPayload);
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Error calculating price: {ex.Message}");
                }
        }
            else
            {
                totalPrice = 0; // No resources selected
            }
        }
    }

    // private class ResourceSelection
    // {
    //     public int ResourceId { get; set; }
    //     public int Quantity { get; set; }
    // }

    // private class PriceCalculationRequest
    // {
    //     public List<ResourceSelection> ResourceSelections { get; set; }
    //     public int MSPTierId { get; set; }
    // }
}
