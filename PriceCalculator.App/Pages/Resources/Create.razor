@page "/Resources/Create"
@using PriceCalculator.App.Model
@using System.Text.Json.Nodes
@using PriceCalculator.App.Services
@inject ResourceService ResourceService
@inject NavigationManager navManager

<PageTitle>Create Resource</PageTitle>
<h1 class="text-center mb-3">Create Resource</h1>
<EditForm Model="@ResourceData" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    
    <div class="row">
        <div class="col-lg-8">

            <div class="row mb-3">
                <label class="col-md-4 col-form-label">Name</label>
                <div class="col-md-8">
                    <InputText class="form-control" @bind-Value="ResourceData.Name" />
                    <ValidationMessage For="@(() => ResourceData.Name)" />
                </div>
            </div>
            <div class="row mb-3">
                <label class="col-md-4 col-form-label">BasePrice</label>
                <div class="col-md-8">
                    <InputNumber class="form-control" @bind-Value="ResourceData.BasePrice" />
                    <ValidationMessage For="@(() => ResourceData.BasePrice)" />
                </div>
            </div>
            <div class="row">
                <div class="offset-md-4 col-md-4 d-grid">
                    <button type="submit" class="btn btn-primary">Save</button>

                </div>
                <div class="col-md-4 d-grid">
                    <a class="btn btn-outline-primary" href="/Resources">Cancel</a>
                </div>
            </div>
        </div>
    </div>

</EditForm>
@code {
    public ResourceDTO ResourceData { get; set; } = new ResourceDTO
        {
            Name = string.Empty,  // Initialize Name to avoid null reference
            BasePrice = 0     // Default value
        };

    private async Task HandleValidSubmit()
    {
        await SaveResource();

        // Reset 
        ResourceData = new ResourceDTO()
            {
                Name = string.Empty,  // Initialize Name to avoid null reference
                BasePrice = 0     // Default value
            }; // Clears the form
        Console.WriteLine("Form submitted successfully.");
    }

    protected async Task SaveResource()
    {
        try
        {
            await ResourceService.CreateRseourceAsync(ResourceData);
            // Redirect to list of Resources on successful submission
            navManager.NavigateTo("/Resources");
        }
        catch (Exception ex)
        {
            Console.WriteLine("An error occurred while saving: " + ex.Message);
        }
    }
}
